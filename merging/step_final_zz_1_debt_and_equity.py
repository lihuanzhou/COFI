
# -*- coding: utf-8 -*-
"""Step FINAL - ZZ_1 - Debt and Equity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14kauCurSpGRjL1CRPCsffN4mmC13bKgL

This notebook is to be run once at the end of all the processing of all datasources and of all the other final tables because we need to compute the values of some columns based on the _final_ values in the other datasets.

We need to compute:
* total_investment_amount and debt_investment_amount: the total amounts for a given equity_id/debt_id.
* number_of_lenders: the number of investors for a debt_id.

To do so, we will need the finalized Transaction table as the information we wish to aggregate is there.
"""

import pandas as pd
from functions.cleaning import preprocess_text
from functions.cleaning import get_all_files, my_reset_index, extract_between_underscore_period, my_read_excel

# needed folder paths
input_folder = "Cleaned Data/" # or we can put this info in the "files name" sheet
intermediate_folder = "Intermediate Results/" # to save some intermediate results
output_folder = "Current Final Tables/"

# load the excel containing all the mapping information
map_table_name = "Variables.xlsx"
map_table = pd.read_excel(map_table_name, sheet_name=None) # read all the sheets that we will be using togehter
print(len(map_table))


# the sheet where there is the information that the client can change
files_names_sheet = "file names"
groupby_info_sheet = "formatting"
vertical_slicing_info_sheet = "variables to use"
aggregation_info_sheet = "aggregation"
db_structure_sheet = "db structure"
un_country_info_sheet = "UN Country Info"
country_names_dict_sheet = "country names dicionary"
bri_countries_sheet = "BRI countries"

# the names of the tables to read here
# debt_name = "Debt.xlsx"
# equity_name = "Equity.xlsx"
# transaction_name = "Transaction.xlsx"
debt_name = "Debt.csv"
equity_name = "Equity.csv"
transaction_name = "Transaction.csv"

"""#### 1. Load data"""


#debt = my_read_excel(output_folder , debt_name)
debt = pd.read_excel(output_folder + debt_name, encoding=)
equity = my_read_excel(output_folder , equity_name)
transaction = my_read_excel(output_folder , transaction_name)

debt.head()

equity.head()

transaction.head()

[x for x in transaction['investment_id'].unique() if transaction.loc[transaction['investment_id'] == x].shape[0] > 1]

"""#### 2. Compute total amounts"""

def compute_amount(invst_id):
    # returns the total investment amount for a given investment_id
    # this is the sum of what each investor contributes in the investment
    investment = transaction.loc[transaction['investment_id'] == invst_id]
    return investment['amount'].sum()

# apply
debt['debt_investment_amount'] = debt['debt_id'].apply(lambda id: compute_amount(id))
equity['total_investment_amount'] = equity['equity_id'].apply(lambda id: compute_amount(id))

debt.loc[debt['debt_investment_amount'] > 0]

equity.loc[equity['total_investment_amount'] > 0]

equity.loc[equity['equity_id'] == "EQUITYID_FDIMARKETS_153"]

transaction.loc[transaction['investment_id'] == "EQUITYID_IJGLOBAL_2"]

"""#### Save"""

output_folder

debt.to_csv(output_folder + debt_name, index=False)
equity.to_csv(output_folder + equity_name, index=False)

debt.shape[0]

equity.shape[0]

