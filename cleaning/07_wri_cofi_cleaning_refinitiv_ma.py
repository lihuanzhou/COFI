# -*- coding: utf-8 -*-
"""07.WRI COFI_Cleaning_REFINITIV_MA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v2F5nJJXi0UYVw6PPStnkqhSLSedtX_L

Load Libraries
"""

import pandas as pd
import numpy as np
import re
import datetime
# IMPORT LOCAL FUNCTIONS
from COFI_cleaning_functions import extract_plant, extract_capacity, extract_fuel, extract_fuel_proxy, region_clean

"""### Set Variables
These variables can be adjusted upfront or via frontend platform without visiting the algorithm code
"""

# Set source data location
path = r'G:\My Drive\ZFG Insights\Project Folder\51. WRI\1. COFI NLP Project\4. Cleaned Data Source'

# Load Master Mapping file
mapping = './Mapping Files/COFI Mapping_columns.xlsx'
mapping_source_sheet = 'Source'

# Load the name of source dataset for this code
source_name = 'REFINITIV_MA'

# Load fuel mapping file
fuel_map = './Mapping Files/STI-reference_primary-fuel-mapping.xlsx'

# Cleand file output directory
outname = './Cleaned Data/'

"""### Load source data"""

# Set master path
# import os
# os.chdir(path)

# Load Master mapping file
map_df = pd.read_excel(mapping, sheet_name = mapping_source_sheet)

map_temp = map_df.loc[map_df['Source_Name'] == source_name]
map_temp = map_temp.reset_index(drop = True)

# Load fuel mapping file
fuel_map = pd.read_excel(fuel_map)

# load Source Data
if len(map_temp) > 1:
    appended_data = []
    print("FILES SEEN BY CLEANING refinitiv ma")
    for i in map_temp.index:
        # load Source Data
        filename = map_temp.loc[i,'File_Name']
        print(filename)
        starting_row = map_temp.loc[i,'Starting_row']
        sheet = map_temp.loc[i,'Sheet_name']

        if '.xls' in filename:
            if pd.notna(sheet):
                df = pd.read_excel(filename, sheet_name=sheet, skiprows=starting_row)
            else:
                df = pd.read_excel(filename, skiprows=starting_row)
        elif filename.endswith('.csv'):
            df = pd.read_csv(filename)

        appended_data.append(df)

    df = pd.concat(appended_data)
    df = df.reset_index(drop = True)

else:
    # load Source Data
    filename = map_temp.loc[0,'File_Name']
    print("SINGLE FILE ", filename)
    starting_row = map_temp.loc[0,'Starting_row']
    sheet = map_temp.loc[0,'Sheet_name']

    if '.xls' in filename:
        if pd.notna(sheet):
            df = pd.read_excel(filename, sheet_name=sheet, skiprows=starting_row)
        else:
            df = pd.read_excel(filename, skiprows=starting_row)
    elif filename.endswith('.csv'):
        df = pd.read_csv(filename)



"""### Clean Source Data
This chunk of code is customized per source database.

Variables need cleaning are listed in the Mapping file

#### Filter
1. filter by year, after 2000
"""

# Convert 'Date Announced' column to datetime format
df['Date Announced'] = pd.to_datetime(df['Date Announced'])

# Split the date into Year, Month, and Day columns
df['Year'] = df['Date Announced'].dt.year
df['Month'] = df['Date Announced'].dt.month
df['Day'] = df['Date Announced'].dt.day

df.shape

# Filter by year
df = df[df['Year'] >= 2000]
df = df.reset_index(drop = True)
df.shape

"""#### Map columns and Convert Units
1. create new, modified columns based on mapping to final variables, as indicated in the mapping file
2. convert units of currency, unit, and capacity unit during step 1
"""

# Transform variables for future matching
for i in df.index:

    # Create a new column mapping to "power_plant_name"
    df.loc[i,'power_plant_name'] = region_clean(df.loc[i,'Target Full Name'])

    # Create a new column mapping to "primary_fuel" from Deal Synopsis column
    df.loc[i,'primary_fuel'] = extract_fuel_proxy(df.loc[i,'Deal Synopsis'])

    # Create a new column mapping to "investment_type" from Deal Synopsis column
    # pending definition

    # Create a new column mapping to "equity_investment_year" from the derived year column
    df.loc[i,'equity_investment_year'] = df.loc[i,'Year']

# Rename variables into final database names if the variable doesn't need transformation

# load variable names, which are the variables labeled in mapping file but without a Note.
df_var = pd.read_excel(mapping, sheet_name = source_name)
df_var = df_var[df_var['Note'].isna() & df_var[source_name].notna()]
df_var = df_var.reset_index(drop = True)
variables = df_var[source_name].tolist()

# rename each variable
for j in df_var.index:
    old_name = df_var.loc[j,source_name]
    new_name = df_var.loc[j,'Column_name']
    df[new_name] = df[old_name]



"""### Save cleaned data"""

df.to_excel(outname + source_name + '.xlsx', index = False)

df



